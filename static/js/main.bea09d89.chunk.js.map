{"version":3,"sources":["components/Loading/index.tsx","components/Error/index.tsx","components/Post/index.tsx","config.ts","App.tsx","serviceWorker.ts","index.tsx"],"names":["Loading","className","Error","msg","Post","number","onClick","useQuery","query","result","fetching","data","error","message","viewer","repository","issue","title","publishedAt","bodyHTML","Date","toDateString","dangerouslySetInnerHTML","__html","App","useState","visiblePostNumber","setVisiblePostNumber","avatarUrl","url","nodes","issues","href","src","alt","map","key","Boolean","window","location","hostname","match","READONLY_TOKEN","split","reverse","join","client","createClient","fetchOptions","headers","Authorization","ReactDOM","render","value","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2RAgBeA,G,MAbW,WACxB,OACE,yBAAKC,UAAU,gBACb,yBAAKA,UAAU,gBACb,8BACA,8BACA,8BACA,kCCAOC,G,YAJiB,SAAC,GAAa,IAAXC,EAAU,EAAVA,IACjC,OAAO,4BAAKA,KCiDCC,EA5CgB,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAAc,EACrCC,YAAS,CACxBC,MAAM,gDAAD,OCXsB,sBDWtB,yCAGiBH,EAHjB,mHADAI,EAD+C,oBAc9CC,EAA0BD,EAA1BC,SAAUC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAExB,GAAIF,EACF,OAAO,kBAAC,EAAD,MAGT,GAAIE,EACF,OAAO,kBAAC,EAAD,CAAOT,IAAKS,EAAMC,UArB2B,MA8BlDF,EALFG,OACEC,WACEC,MAASC,EA3BuC,EA2BvCA,MAAOC,EA3BgC,EA2BhCA,YAAaC,EA3BmB,EA2BnBA,SAKnC,OACE,yBAAKlB,UAAU,OAAOK,QAASA,GAC7B,4BAAKW,GACL,uBAAGhB,UAAU,aAAa,IAAImB,KAAKF,GAAaG,gBAChD,6BACEpB,UAAU,gBACVqB,wBAAyB,CAAEC,OAAQJ,EAAWA,EAAWA,OE0BlDK,EApEO,WAAO,IAAD,EACwBC,oBAAU,GADlC,mBACnBC,EADmB,KACAC,EADA,OAETpB,YAAS,CACxBC,MAAM,+FAAD,ODRsB,sBCQtB,6KADAC,EAFmB,oBAmBlBC,EAA0BD,EAA1BC,SAAUC,EAAgBF,EAAhBE,KAAMC,EAAUH,EAAVG,MAExB,GAAIF,EACF,OAAO,kBAAC,EAAD,MAGT,GAAIE,EACF,OAAO,kBAAC,EAAD,CAAOT,IAAKS,EAAMC,UA1BD,MAqCtBF,EAPFG,OACEc,EA/BsB,EA+BtBA,UACAC,EAhCsB,EAgCtBA,IAEYC,EAlCU,EAiCtBf,WACEgB,OAAUD,MAKhB,OACE,oCACE,yBAAK7B,UAAU,UACb,qCACA,uBAAG+B,KAAMH,GACP,yBAAKI,IAAKL,EAAW3B,UAAU,SAASiC,IAAI,aAGhD,yBAAKjC,UAAU,SACZ6B,EAAMK,IAAI,gBAAG9B,EAAH,EAAGA,OAAQY,EAAX,EAAWA,MAAX,OACT,yBACEhB,UAAU,OACVmC,IAAK/B,EACLC,QAAS,kBAAMqB,EAAqBtB,KAEpC,wBAAIJ,UAAU,eAAegB,QAIX,IAAvBS,GACC,kBAAC,EAAD,CACErB,OAAQqB,EACRpB,QAAS,kBAAMqB,GAAsB,QCzD3BU,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCTN,IAAMC,EHR+B,2CGQQC,MAAM,IAChDC,UACAC,KAAK,IAEFC,EAASC,YAAa,CAC1BlB,IAAK,iCACLmB,aAAc,CACZC,QAAS,CACPC,cAAc,UAAD,OAAYR,OAK/BS,IAASC,OACP,kBAAC,IAAD,CAAUC,MAAOP,GACf,kBAAC,EAAD,OAEFQ,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.bea09d89.chunk.js","sourcesContent":["import React from 'react'\nimport './index.css'\n\nconst Loading: React.FC = () => {\n  return (\n    <div className=\"loading-mask\">\n      <div className=\"lds-ellipsis\">\n        <div></div>\n        <div></div>\n        <div></div>\n        <div></div>\n      </div>\n    </div>\n  )\n}\n\nexport default Loading\n","import React from 'react'\n\ninterface IProps {\n  msg: String\n}\n\nconst Error: React.FC<IProps> = ({ msg }) => {\n  return <h3>{msg}</h3>\n}\n\nexport default Error\n","import React from 'react'\nimport { useQuery } from 'urql'\nimport { REPOSITORY_NAME } from '../../config'\nimport Loading from '../Loading'\nimport './index.css'\nimport Error from '../Error'\n\ninterface IProps {\n  number: Number\n  onClick: () => void\n}\n\nconst Post: React.FC<IProps> = ({ number, onClick }) => {\n  const [result] = useQuery({\n    query: `{\n      viewer {\n        repository(name: \"${REPOSITORY_NAME}\") {\n          issue(number: ${number}) {\n            title\n            publishedAt\n            bodyHTML\n          }\n        }\n      }\n    }`\n  })\n  const { fetching, data, error } = result\n\n  if (fetching) {\n    return <Loading />\n  }\n\n  if (error) {\n    return <Error msg={error.message} />\n  }\n\n  const {\n    viewer: {\n      repository: {\n        issue: { title, publishedAt, bodyHTML }\n      }\n    }\n  } = data\n\n  return (\n    <div className=\"post\" onClick={onClick}>\n      <h1>{title}</h1>\n      <i className=\"post-time\">{new Date(publishedAt).toDateString()}</i>\n      <article\n        className=\"markdown-body\"\n        dangerouslySetInnerHTML={{ __html: bodyHTML + bodyHTML + bodyHTML }}\n      ></article>\n    </div>\n  )\n}\n\nexport default Post\n","// 此处存放反转后的只读token，因为源码中的token会被github过滤\nexport const READONLY_TOKEN_REVESE = '73ac9749da2d38d6a1fd763b6cb6a4dd483af9c6'\n// 存放blog的仓库名\nexport const REPOSITORY_NAME = 'ForeverSc.github.io'\n","import React, { useState } from 'react'\nimport { useQuery } from 'urql'\nimport { REPOSITORY_NAME } from './config'\nimport Loading from './components/Loading'\nimport './App.css'\nimport Post from './components/Post'\nimport Error from './components/Error'\n\nconst App: React.FC = () => {\n  const [visiblePostNumber, setVisiblePostNumber] = useState(-1)\n  const [result] = useQuery({\n    query: `{\n      viewer {\n        avatarUrl\n        login\n        url\n        repository(name: \"${REPOSITORY_NAME}\") {\n          issues(last: 10, states: OPEN) {\n            nodes {\n              title\n              number\n            }\n          }\n        }\n      }\n    }`\n  })\n  const { fetching, data, error } = result\n\n  if (fetching) {\n    return <Loading />\n  }\n\n  if (error) {\n    return <Error msg={error.message} />\n  }\n\n  const {\n    viewer: {\n      avatarUrl,\n      url,\n      repository: {\n        issues: { nodes }\n      }\n    }\n  } = data\n\n  return (\n    <>\n      <div className=\"header\">\n        <h1>Favor</h1>\n        <a href={url}>\n          <img src={avatarUrl} className=\"avatar\" alt=\"avatar\" />\n        </a>\n      </div>\n      <div className=\"cards\">\n        {nodes.map(({ number, title }: any) => (\n          <div\n            className=\"card\"\n            key={number}\n            onClick={() => setVisiblePostNumber(number)}\n          >\n            <h5 className=\"card-header\">{title}</h5>\n          </div>\n        ))}\n      </div>\n      {visiblePostNumber !== -1 && (\n        <Post\n          number={visiblePostNumber}\n          onClick={() => setVisiblePostNumber(-1)}\n        />\n      )}\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void\n  onUpdate?: (registration: ServiceWorkerRegistration) => void\n}\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    )\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'github-markdown-css'\nimport './wing.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\nimport { Provider, createClient } from 'urql'\nimport { READONLY_TOKEN_REVESE } from './config'\n\nconst READONLY_TOKEN = READONLY_TOKEN_REVESE.split('')\n  .reverse()\n  .join('')\n\nconst client = createClient({\n  url: 'https://api.github.com/graphql',\n  fetchOptions: {\n    headers: {\n      Authorization: `Bearer ${READONLY_TOKEN}`\n    }\n  }\n})\n\nReactDOM.render(\n  <Provider value={client}>\n    <App />\n  </Provider>,\n  document.getElementById('root')\n)\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}